!function(n){var e={};function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(o,r,function(e){return n[e]}.bind(null,r));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=95)}({95:function(n,e){tinymce.PluginManager.add("pricons",function(n,e){n.addButton("pricons",{text:"",icon:"pricon-smiley-cool",context:"insert",tooltip:"Pricon",cmd:"openInsertPiconModal"}),n.addCommand("openInsertPiconModal",function(){n.windowManager.open({title:"Pricons",url:e+"/mce-picons.php",width:500,height:400,buttons:[{text:"Insert",onclick:function(e){var t=jQuery(".mce-container-body.mce-window-body.mce-abs-layout iframe").contents(),o=t.find('[name="pricon-size"]').val(),r=t.find('[name="pricon-color"]').val(),i=t.find('[name="pricon-icon"]').val();if(!i.length)return n.windowManager.close(),!1;var c='[pricon icon="'+i+'"';return r.length&&(c=c+' color="'+r+'"'),o.length&&(c=c+' size="'+o+'"'),c+="]",n.insertContent(c),n.windowManager.close(),!0}}]})})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=mce-pricons.d6faf21c0d8c885e6413.js.map